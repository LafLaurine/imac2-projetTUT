version: '3'
services:
  extraction_dir:
    build:
      context: ./extraction
      dockerfile: ./extract_dir/Dockerfile
    env_file: .env
    ports:
      - "5000:5000"
    volumes:
      - ./extraction:/code
      - ./${input_path_dir}:/code/${input_path_dir}
    environment:
      FLASK_ENV: development
      input_path_dir: ${input_path_dir}
      output_path: ${output_path}
      method_detection: ${method_detection}
      are_warped: ${are_warped}
      are_culled: ${are_culled}
      are_saved_landmarks: ${are_saved_landmarks}     
  
  extraction_video:
    build:
      context: ./extraction
      dockerfile: ./extract_video/Dockerfile
    env_file: .env
    ports:
      - "5001:5001"
    volumes:
      - ./extraction:/code
      - ./${input_path}:/code/${input_path}
    environment:
      FLASK_ENV: development
      input_path: ${input_path}
      video_download: ${video_download}
      video_url: ${video_url}
      name_video_downloaded: ${name_video_downloaded}
      output_path: ${output_path}
      method_detection: ${method_detection}
      start_frame: ${start_frame}
      step_frame: ${step_frame}
      end_frame: ${end_frame}
      max_frame: ${max_frame}
      are_warped: ${are_warped}
      are_culled: ${are_culled}
      are_saved_landmarks: ${are_saved_landmarks}
      is_saved_rectangle: ${is_saved_rectangle}

  mesonet_test:
    build:
      context: ./MesoNet
      dockerfile: ./mesonet_test/Dockerfile
    env_file: .env
    ports:
      - "5002:5002"
    volumes:
      - ./MesoNet:/code
      - ./${train_dataset}:/code/${train_dataset}
    environment:
      FLASK_ENV: development
      train_dataset: ${train_dataset}
      mesonet_classifier: ${mesonet_classifier}
      number_epochs: ${number_epochs}
  
  mesonet_analyse:
    build:
      context: ./MesoNet
      dockerfile: ./mesonet_analyse/Dockerfile
    env_file: .env
    ports:
      - "5003:5003"
    volumes:
      - ./MesoNet:/code
      - ./${path_to_dataset}:/code/${path_to_dataset}
    environment:
      FLASK_ENV: development
      path_to_dataset: ${path_to_dataset}
      mesonet_classifier: ${mesonet_classifier}
      batch_size: ${batch_size}

  mesonet_training:
    build:
      context: ./MesoNet
      dockerfile: ./mesonet_train/Dockerfile
    env_file: .env
    ports:
      - "5004:5004"
    volumes:
      - ./MesoNet:/code
      - ./${train_dataset}:/code/${train_dataset}
    environment:
      FLASK_ENV: development
      train_dataset: ${train_dataset}
      mesonet_classifier: ${mesonet_classifier}
      batch_size: ${batch_size}
      number_epochs: ${number_epochs}
      step_save_checkpoint: ${step_save_checkpoint}

  capsule_forensics_test:
    build:
      context: ./CapsuleForensics
      dockerfile: ./test/Dockerfile
    env_file: .env
    ports:
      - "5005:5005"
    volumes:
        - ./CapsuleForensics:/code
        - ./${train_dataset}:/code/${train_dataset}
    environment:
      FLASK_ENV: development
      capsule_forensics_classifier: ${capsule_forensics_classifier}
      train_dataset: ${train_dataset}
      batch_size: ${batch_size}
      number_epochs: ${number_epochs}
      version_weights: ${version_weights}
    
  capsule_forensics_analyse:
    build:
      context: ./CapsuleForensics
      dockerfile: ./analyse/Dockerfile
    env_file: .env
    ports:
      - "5006:5006"
    volumes:
      - ./CapsuleForensics:/code
      - ./${path_to_dataset}:/code/${path_to_dataset}
    environment:
      FLASK_ENV: development
      capsule_forensics_classifier: ${capsule_forensics_classifier}
      path_to_dataset: ${path_to_dataset}
      batch_size: ${batch_size}
      version_weights: ${version_weights}

  capsule_forensics_training:
    build:
      context: ./CapsuleForensics
      dockerfile: ./training/Dockerfile
    env_file: .env
    ports:
      - "5007:5007"
    volumes:
      - ./CapsuleForensics:/code
      - ./${train_dataset}:/code/${train_dataset}
    environment:
      FLASK_ENV: development
      capsule_forensics_classifier: ${capsule_forensics_classifier}
      train_dataset: ${train_dataset}
      batch_size: ${batch_size}
      epoch_resume: ${epoch_resume}
      number_epochs: ${number_epochs}
      step_save_checkpoint: ${step_save_checkpoint}
  
  redis:
    image: "redis:alpine"